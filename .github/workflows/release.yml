name: Release Build and Publish
on:
  push:
    tags:
      - "v*" # Trigger on version tags like v0.1.0, v1.0.0, etc.

env:
  RELEASE_BIN: sold
  CARGO_TARGET_DIR: target
  BOOST_VERSION_FOR_CACHE: "1.86.0"
  BOOST_DIR_FOR_CACHE: "boost_1_86_0" # update compiler/scripts/install_boost_macos.sh if change

jobs:
  build:
    name: Build Artifacts (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            install_script: ./compiler/scripts/install_deps.sh
          - os: macos-latest
            install_script: ./compiler/scripts/install_deps.sh
          - os: windows-latest
            install_script: ./compiler/scripts/install_deps.ps1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          # Strip 'refs/tags/' prefix
          VERSION_TAG="${GITHUB_REF#refs/tags/}"
          echo "Using version tag: $VERSION_TAG"
          echo "version=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/Makefile', '**/*.cpp', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-ccache-
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ccache # gzip is typically pre-installed
          # Run the project's dependency script
          sudo bash ${{ matrix.install_script }}

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # Run the project's dependency script
          bash ${{ matrix.install_script }}
          bash compiler/scripts/install_cmake.sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Windows Boost Build
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: compiler/deps/boost
          key: ${{ runner.os }}-boost-1.83.0-${{ hashFiles('compiler/scripts/install_deps.ps1') }}
          restore-keys: |
            ${{ runner.os }}-boost-1.83.0-

      - name: Cache macOS Boost Build
        if: runner.os == 'macOS'
        id: cache-boost-macos
        uses: actions/cache@v4
        with:
          # This path must match INSTALL_PREFIX from install_boost_macos.sh
          path: ${{ env.HOME }}/.local/${{ env.BOOST_DIR_FOR_CACHE }}
          # Key on the boost script itself, as it contains version and logic
          key: ${{ runner.os }}-boost-${{ env.BOOST_VERSION_FOR_CACHE }}-${{ hashFiles('compiler/scripts/install_boost_macos.sh') }}
          restore-keys: |
            ${{ runner.os }}-boost-${{ env.BOOST_VERSION_FOR_CACHE }}-
      - name: Install build dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          bash compiler/scripts/install_cmake.sh
          .\${{ matrix.install_script }}
          Add-Content $env:GITHUB_PATH "$HOME\.local\bin"

      - name: Build Rust Binary (${{ env.RELEASE_BIN }})
        shell: bash
        run: |
          cargo build --release
      - name: List target/release contents (Debug)
        shell: bash
        run: ls -lah target/release

      - name: Package Artifact
        shell: bash
        run: |
          BASE_BIN_NAME="${{ env.RELEASE_BIN }}"
          SOURCE_BIN_PATH="./${{ env.CARGO_TARGET_DIR }}/release/${BASE_BIN_NAME}"

          TARGET_UNCOMPRESSED_FILENAME="${BASE_BIN_NAME}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            SOURCE_BIN_PATH="${SOURCE_BIN_PATH}.exe"
            TARGET_UNCOMPRESSED_FILENAME="${TARGET_UNCOMPRESSED_FILENAME}.exe"
          fi

          mkdir packaging_tmp
          TEMP_BIN_PATH="./packaging_tmp/${TARGET_UNCOMPRESSED_FILENAME}"

          cp "${SOURCE_BIN_PATH}" "${TEMP_BIN_PATH}"

          pushd packaging_tmp
          gzip "${TARGET_UNCOMPRESSED_FILENAME}" # Creates ${TARGET_UNCOMPRESSED_FILENAME}.gz
          GZIPPED_FILENAME="${TARGET_UNCOMPRESSED_FILENAME}.gz"
          popd

          FINAL_ARTIFACT_NAME="${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.version }}-${{ runner.os }}.gz"
          mv "./packaging_tmp/${GZIPPED_FILENAME}" "./${FINAL_ARTIFACT_NAME}"
          rm -rf packaging_tmp

          echo "ARTIFACT_PATH=${FINAL_ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "Created ${FINAL_ARTIFACT_NAME}"
          echo "Contents of ${FINAL_ARTIFACT_NAME} (when uncompressed) will be: ${TARGET_UNCOMPRESSED_FILENAME}"

      - name: List Workspace Contents after Packaging (Debug)
        shell: bash
        run: ls -lA

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifact
          path: ${{ env.ARTIFACT_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          VERSION_TAG="${GITHUB_REF#refs/tags/}"
          echo "Using version tag: $VERSION_TAG"
          echo "version=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        shell: bash
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Release of version ${{ steps.get_version.outputs.version }}
          files: |
            artifacts/Linux-artifact/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.version }}-Linux.gz
            artifacts/macOS-artifact/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.version }}-macOS.gz
            artifacts/Windows-artifact/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.version }}-Windows.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}